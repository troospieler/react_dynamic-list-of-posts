{"version":3,"sources":["api/posts.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["POSTS_URL","COMMENTS_URL","getAllPosts","a","fetch","response","json","result","data","filter","post","title","truePosts","userId","filtered","postId","getPostComments","comment","createComment","method","headers","body","JSON","stringify","remove","commentId","Loader","className","PostsList","setPostID","postID","posts","length","map","key","id","type","onClick","getPostDetails","defaultProps","PropTypes","number","NewCommentForm","parsing","useState","name","setName","email","setEmail","commentText","setCommentText","onSubmit","e","preventDefault","placeholder","value","onChange","target","required","PostDetails","comments","setComments","postComments","chosenPost","find","commentsShown","setCommentsShown","show","hide","newPosts","newComments","useEffect","then","res","disabled","App","userID","setuserID","setPosts","getUserPosts","event","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16299790.chunk.js","sourcesContent":["const POSTS_URL = 'https://mate-api.herokuapp.com/posts';\nconst COMMENTS_URL = 'https://mate-api.herokuapp.com/comments';\n\nexport async function getAllPosts() {\n  const response = await fetch(POSTS_URL);\n  const result = await response.json();\n  const truePosts = await result.data.filter(post => post.title);\n\n  return truePosts;\n}\n\nexport async function getUserPosts(userId) {\n  const result = await getAllPosts();\n  const filtered = await result.filter((post) => {\n    if (userId === 0) {\n      return post;\n    }\n\n    return post.userId === userId;\n  });\n\n  return filtered;\n}\n\nexport async function getPostDetails(postId) {\n  const response = await fetch(`${POSTS_URL}/${postId}`);\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport async function getPostComments(postId) {\n  const response = await fetch(COMMENTS_URL);\n  const result = await response.json();\n\n  const filtered = await result.data\n    .filter(comment => comment.postId === postId);\n\n  return filtered;\n}\n\nexport const createComment = async(post) => {\n  const response = await fetch(COMMENTS_URL, {\n    method: 'POST',\n    headers: {\n      // eslint-disable-next-line quotes\n      \"Content-type\": \"application/json; charset=UTF-8\",\n    },\n    body: JSON.stringify(post),\n  });\n  const result = await response.json();\n\n  return result;\n};\n\nexport const remove = async(commentId) => {\n  const response = await fetch(\n    `${COMMENTS_URL}/${commentId}`, { method: 'DELETE' },\n  );\n\n  return response;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader/Loader';\nimport './PostsList.scss';\n\nexport const PostsList = ({ setPostID, postID, posts }) => (\n\n  !posts.length\n    ? <Loader />\n    : (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            {post.id === postID ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setPostID('')}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  getPostDetails(post.id);\n                  setPostID(post.id);\n                }}\n              >\n                Open\n              </button>\n            )}\n\n          </li>\n        ))}\n      </div>\n    )\n);\n\nPostsList.propTypes = {\n  setPostID: PropTypes.func.isRequired,\n  postID: PropTypes.number,\n  posts: PropTypes.arrayOf(PropTypes.object),\n};\n\nPostsList.defaultProps = {\n  posts: [],\n  postID: PropTypes.number,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { createComment } from '../../api/posts';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postID, parsing }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n\n  const formCleaner = () => {\n    setName('');\n    setEmail('');\n    setCommentText('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={async(e) => {\n        e.preventDefault();\n        formCleaner();\n        await createComment({\n          postId: postID,\n          body: commentText,\n          email,\n          name,\n        }); // (id, postID, body, email, name)\n        await parsing();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentText}\n          onChange={e => setCommentText(e.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postID: PropTypes.number.isRequired,\n  parsing: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostComments, remove } from '../../api/posts';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({\n  posts,\n  postID,\n  comments,\n  setComments,\n  postComments,\n}) => {\n  const chosenPost = posts.find(post => post.id === postID);\n  const [commentsShown, setCommentsShown] = useState(false);\n  const show = postComments ? `Show ${postComments} comments` : 'no comments';\n  const hide = postComments ? 'Hide comments' : 'no comments';\n\n  const parsing = async() => {\n    const newPosts = await getPostComments(postID);\n    const newComments = await setComments(newPosts);\n\n    return newComments;\n  };\n\n  useEffect(() => {\n    getPostComments(postID).then(res => setComments(res));\n  }, [postID]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{chosenPost.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setCommentsShown(!commentsShown)}\n          disabled={!postComments}\n        >\n          {commentsShown ? hide : show}\n        </button>\n\n        {commentsShown && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={async() => {\n                    await remove(comment.id);\n                    await parsing();\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            parsing={parsing}\n            postID={postID}\n            comments={comments}\n            getPostComments={getPostComments}\n            setComments={setComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n  })).isRequired,\n  postID: PropTypes.number.isRequired,\n  setComments: PropTypes.func.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  })).isRequired,\n  postComments: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { getUserPosts } from './api/posts';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [userID, setuserID] = useState(0);\n  const [postID, setPostID] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [comments, setComments] = useState([]);\n  const postComments = comments.length;\n\n  useEffect(() => {\n    getUserPosts(userID).then(result => setPosts(result));\n  }, [userID, postID, setPosts]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              setuserID(+event.target.value);\n              setPostID(null);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            setPostID={setPostID}\n            postID={postID}\n            posts={posts}\n            // userID={userID}\n            // setPosts={setPosts}\n          />\n        </div>\n\n        {postID && (\n          <div className=\"App__content\">\n            <PostDetails\n              userID={userID}\n              posts={posts}\n              postID={postID}\n              setComments={setComments}\n              postComments={postComments}\n              comments={comments}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}